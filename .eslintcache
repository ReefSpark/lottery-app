[{"/root/Documents/lottery-app/src/history.js":"1","/root/Documents/lottery-app/src/Component/user.js":"2","/root/Documents/lottery-app/src/Component/purchase-ticket.js":"3","/root/Documents/lottery-app/src/Component/login.js":"4","/root/Documents/lottery-app/src/Component/tablePagation/tablePagenation.js":"5","/root/Documents/lottery-app/src/index.js":"6","/root/Documents/lottery-app/src/App.js":"7","/root/Documents/lottery-app/src/Component/tablePagation/searchPagenation.js":"8","/root/Documents/lottery-app/src/Component/Dasdboard.js":"9","/root/Documents/lottery-app/src/Component/manage-ticket.js":"10","/root/Documents/lottery-app/src/Component/header.js":"11","/root/Documents/lottery-app/src/Component/viewTickets.js":"12","/root/Documents/lottery-app/src/Component/tablePagation/manageTicketPagenation.js":"13","/root/Documents/lottery-app/src/Component/tablePagation/searchManageTicket.js":"14"},{"size":106,"mtime":1610457392000,"results":"15","hashOfConfig":"16"},{"size":6792,"mtime":1611345190033,"results":"17","hashOfConfig":"16"},{"size":9566,"mtime":1611441127777,"results":"18","hashOfConfig":"16"},{"size":3353,"mtime":1611436773645,"results":"19","hashOfConfig":"16"},{"size":7977,"mtime":1611346365461,"results":"20","hashOfConfig":"16"},{"size":553,"mtime":1610476388196,"results":"21","hashOfConfig":"16"},{"size":1301,"mtime":1611433212269,"results":"22","hashOfConfig":"16"},{"size":8090,"mtime":1610484897249,"results":"23","hashOfConfig":"16"},{"size":7291,"mtime":1611433380329,"results":"24","hashOfConfig":"16"},{"size":8810,"mtime":1611441118973,"results":"25","hashOfConfig":"16"},{"size":2668,"mtime":1611176893193,"results":"26","hashOfConfig":"16"},{"size":1431,"mtime":1611428201536,"results":"27","hashOfConfig":"16"},{"size":8811,"mtime":1611424236372,"results":"28","hashOfConfig":"16"},{"size":9026,"mtime":1611432070772,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17s6qvr",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},"/root/Documents/lottery-app/src/history.js",[],"/root/Documents/lottery-app/src/Component/user.js",[],["65","66"],"/root/Documents/lottery-app/src/Component/purchase-ticket.js",["67","68","69"],"import React, { Component } from 'react';\nimport './style-sheet/purchase-ticket.css'\nimport _ from 'lodash';\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Axios from 'axios'\n\nclass PurchaseTicket extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            userNames: [],\n            ticketNames: [],\n            userName: \"\",\n            ticketName: '',\n            quantity: 0,\n            showTime: '11:00',\n            actualPrice: 0,\n            ticketNumber: [],\n            sellingPrice: [],\n            ticketNumberError: '',\n            sellingPriceError: '',\n            message: '',\n            values: [{}]\n        }\n        this.fieldsArray=[];\n    }\n    validate = () => {\n        let ticketNumberError = '', sellingPriceError = ''\n        if (this.state.ticketNumber.length === 0) {\n            ticketNumberError = \"Ticket Number cannot be blank\"\n        }\n        if (this.state.sellingPrice.length === 0) {\n            sellingPriceError = \"Selling Price cannot be blank\"\n        }\n        if (ticketNumberError || sellingPriceError) {\n            this.setState({ ticketNumberError: ticketNumberError, sellingPriceError: sellingPriceError });\n            return false\n        }\n        return true\n    }\n    componentDidMount() {\n\n        Axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/v1/user`).then((response) => {\n\n            this.setState({ userNames: response.data.data.attributes.data, userName: response.data.data.attributes.data[0]._id })\n\n        }).catch((err) => {\n        });\n        Axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/v1/master`).then((response) => {\n            this.setState({ ticketNames: response.data.data.attributes.data, actualPrice: response.data.data.attributes.data[0].price, ticketName: response.data.data.attributes.data[0]._id })\n        }).catch((err) => {\n        });\n    }\n    // componentDidUpdate() {\n    //     this.setState({ quantity: 0 })\n    // }\n\n    handleUserNameSelection = event => {\n        this.setState({ userName: event.target.value })\n    }\n    handleTicketSelection = event => {\n\n        let i = 0;\n        let ticketIndex = this.state.ticketNames;\n        while (i < ticketIndex.length) {\n            if (ticketIndex[i]._id === event.target.value) {\n                this.setState({ ticketName: event.target.value, actualPrice: ticketIndex[i].price })\n            }\n            i++;\n        }\n    }\n    handleQuantitySelection = event => {\n        this.setState({ quantity: event.target.value })\n    }\n    handleShowTimeSelection = event => {\n\n        this.setState({ showTime: event.target.value })\n    }\n    handleText = (i, event) => {\n        this.state.ticketNumber[i] = event.target.value.toUpperCase()\n        this.setState({ ticketNumber: this.state.ticketNumber })\n    }\n\n    handleSellingPrice = (i, event) => {\n        this.state.sellingPrice[i] = event.target.value.toUpperCase()\n        this.setState({ sellingPrice: this.state.sellingPrice })\n    }\n\n    removeSumbit = () => {\n        this.fieldsArray.splice(this.fieldsArray.length-1,1)\n        this.setState({ quantity:0})\n    }\n    purchaseSumbit = () => {\n        const isValid = this.validate();\n        console.log(isValid)\n        if (isValid) {\n            let i = 0;\n            let ticketNumberCount = this.state.ticketNumber\n            let sellingPriceCount = this.state.sellingPrice\n            while (i < ticketNumberCount.length) {\n                this.state.values[i] = {\n                    user_id: this.state.userName,\n                    ticket_master_id: this.state.ticketName,\n                    actual_price: this.state.actualPrice,\n                    ticket_number: ticketNumberCount[i],\n                    show_time: this.state.showTime,\n                    sell_price: sellingPriceCount[i],\n                    date: new Date()\n                }\n                this.setState({ values: this.state.values })\n                i++\n            }\n            let data = Object.assign({\n                data: {\n                    attributes: this.state.values\n                }\n            })\n            return Axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/v1/purchase/${this.state.userName}`, data).then((response) => {\n                if (response.status === 200)\n                    this.setState({ message: response.data.data.attributes.message })\n                toast.success(this.state.message);\n            }).catch((err) => {\n                if (err.response.status === 400) {\n                    this.setState({ message: err.response.data.data.attributes.message })\n                    return toast.error(this.state.message);\n                }\n            });\n        }\n    }\n\n    render() {\n        for (let i = 0; i <= this.state.quantity; i++) {\n            this.fieldsArray.push(\n                <div className=\"row loop-array\">\n                    <div className=\"col\">\n                        <div className=\"form-outline\">\n                            <input type=\"text\" id=\"form8Example1\" className=\"form-control\" onChange={this.handleText.bind(this, i)} />\n                            {this.state.ticketNumberError && (<div style={{ \"color\": \"red\", \"fontSize\": \"12px\" }}>\n                                {this.state.ticketNumberError}\n                            </div>)}\n                        </div>\n                    </div>\n\n                    <div className=\"form-outline\">\n                        <select className=\"form-control\">\n                            <option value={this.state.actualPrice}>{this.state.actualPrice}</option>\n                        </select>\n\n                    </div>\n                    <div className=\"col\">\n                        <div className=\"form-outline\">\n                            <input type=\"email\" id=\"form8Example2\" className=\"form-control\" onChange={this.handleSellingPrice.bind(this, i)} />\n                            {this.state.sellingPriceError && (<div style={{ \"color\": \"red\", \"fontSize\": \"12px\" }}>\n                                {this.state.sellingPriceError}\n                            </div>)}\n                        </div>\n                    </div>\n                </div>\n\n            );\n        }\n        return (\n            <div>\n                <h1 style={{ \"marginTop\": \"3%\" }}>Purchase Ticket</h1>\n                <div className=\"ticket-form\">\n                    <div className=\"form-outline\">\n                        <label className=\"form-label\">Username *</label>\n                        <select className=\"form-controls \" onChange={this.handleUserNameSelection}>\n                            {this.state.userNames.map((value, index) => <option key={index} value={value._id}>{value.name}</option>)}\n                        </select>\n\n                    </div>\n                    <div className=\"form-outline\">\n                        <label className=\"form-label\">Ticket Name *</label>\n                        <select className=\"form-controls\" id=\"dropDownMenu\" onChange={this.handleTicketSelection}>\n                            {this.state.ticketNames.map((value, index) => <option key={index} value={value._id} name=\"hello\">{value.name}</option>)}\n                        </select>\n\n                    </div>\n                    <div className=\"form-outline\">\n                        <label className=\"form-label\">Quantity *</label>\n                        <select className=\"form-controls \" onChange={this.handleQuantitySelection}>\n                            {_.range(1, 50).map(value => <option key={value} value={value}>{value}</option>)}\n                        </select>\n\n                    </div>\n                    <div className=\"form-outline\">\n                        <label className=\"form-label\">Show Time *</label>\n                        <select className=\"form-controls\" value={this.state.showTime} onChange={this.handleShowTimeSelection}>\n                            <option> 11:00 AM</option>\n                            <option> 02:00 AM</option>\n                            <option> 05:00 PM</option>\n                            <option> 08:00 PM </option>\n                        </select>\n\n                    </div>\n                </div>\n                <br></br>\n                <div className=\"seprate-line\">\n                </div>\n                <div className=\"purchase-ticket-form\">\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <label className=\"form-label\" >Ticket Number *</label>\n                        </div>\n                        <div className=\"col\">\n                            <label className=\"form-label\" >Actual Price *</label>\n                        </div>\n                        <div className=\"col\">\n                            <label className=\"form-label\" >Selling Price *</label>\n                        </div>\n\n                    </div>\n                    <div>\n                        {this.fieldsArray}\n                    </div>\n                    \n                </div>\n                <div className=\"button-ticket\">\n                    <button className=\"btn  add-user-button\" onClick={this.purchaseSumbit}>Purchase</button>\n                    <button className=\"btn  add-user-button\" onClick={this.removeSumbit}>Remove Action</button>\n                </div>\n                < ToastContainer\n                    position=\"top-right\"\n                    autoClose={3000} />\n            </div>\n        )\n    }\n}\n\nexport default PurchaseTicket\n","/root/Documents/lottery-app/src/Component/login.js",["70","71"],"/root/Documents/lottery-app/src/Component/tablePagation/tablePagenation.js",["72","73","74","75","76","77","78","79"],"/root/Documents/lottery-app/src/index.js",[],"/root/Documents/lottery-app/src/App.js",["80"],"/root/Documents/lottery-app/src/Component/tablePagation/searchPagenation.js",["81","82","83","84"],"import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Select from '@material-ui/core/Select';\nimport Axios from 'axios';\n// popup\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport TextField from '@material-ui/core/TextField';\nimport '../style-sheet/pagination.css'\n\nconst URL = `${process.env.REACT_APP_API_BASE_URL}`;\n//popup\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\nconst columns = [\n  { id: 'name', label: 'Name', minWidth: 100,  align: 'center' },\n  {\n    id: 'mobile',\n    label: 'Mobile',\n    minWidth: 100,\n    align: 'center'\n  },\n  {\n    id: 'email',\n    label: 'Email',\n    minWidth: 100,\n    align: 'center'\n  },\n  {\n    id: 'is_active',\n    label: 'Active',\n    minWidth: 100,\n    align: 'center'\n  },\n];\nconst useStyles = makeStyles({\n  root: {\n    width: '80%',\n    margin:`3% 0 0 10%`,\n  },\n  container: {\n    maxHeight: 440,\n  },\n});\nexport default function StickyHeadTable(props) {\n    console.log({props})\n  const classes = useStyles();\n  const [rows, setRow] = React.useState([])\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  // popup\n  const [editData, setEditData] = React.useState({});\n  const [readOnly, setReadOnly] = React.useState(true);\n  const [open, setOpen] = React.useState(false);\n  // popup\n  const handleClose = () => {\n    setOpen(false);\n    setReadOnly(true)\n  };\n  // component did mount\n  useEffect(async () => {\n    let { data } = await Axios.get(`${URL}/api/v1/user?name=${props.searchName}&page_no=${page}&limit=${rowsPerPage}`);\n    console.log(data.data.attributes.data)\n    setRow(data.data.attributes.data);\n  }, []);\n  // our custom function\n  const userPagination = async (event, something) => {\n    let { data } = await Axios.get(`${URL}/api/v1/user?name=${props.searchName}&page_no=${something}&limit=${rowsPerPage}`);\n    setRow(data.data.attributes.data);\n    setRowsPerPage(+rowsPerPage);\n    setPage(something);\n  }\n  // it call whenever rowsperpage changes\n  useEffect(() => {\n    userPagination(rowsPerPage, 0)\n  }, [rowsPerPage]);\n  // popup\n  const updateUser = async (payload) => {\n    console.log('payload', payload)\n    let { data } = await Axios.patch(`${URL}/api/v1/user/${payload._id}`, {\n      data: {\n        attributes: {\n            email: payload.email,\n            name:payload.name,\n            mobile:payload.mobile,\n            is_active:\"Active\"\n\n        }\n      }\n    });\n    console.log('update data result', data);\n    userPagination(rowsPerPage, 0)\n    setOpen(false);\n    setReadOnly(true);\n  }\n  function rowClick(a) {\n    console.log(a);\n    setEditData(a);\n    setOpen(true);\n  }\n  // popup\n  const changeReadonly = () => {\n    setReadOnly(false)\n  }\n  // change rows per page\n  const handleChangeRowsPerPage = async (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n  return (\n    // const classes = useStyles();\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow selected={true}>\n              {columns.map((column) => (\n                <TableCell\n                  key={column._id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code} onClick={() => rowClick(row)}>\n                  {columns.map((column) => {\n                    const value = row[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'number' ? value : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 20, 25, 100]} // we can set whatever we want\n        component=\"div\"\n        count={29} // !! important ---> need to set total count of records\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={userPagination} // our custom function (NEXT, PREV) button\n        onChangeRowsPerPage={handleChangeRowsPerPage} // rows per page function\n      />\n      {/* popup start */}\n      <Dialog \n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n        contentStyle={{width: \"100%\", maxWidth: \"none\"}}\n       \n      >\n        <DialogTitle s>{\"User View\"}</DialogTitle>\n        <DialogContent>\n\n        <form className={classes.container}  >\n            Email : &nbsp; &nbsp; &nbsp; \n            <TextField\n              name={'email'}\n              value={editData.email}\n              inputProps={{\n                readOnly: readOnly\n              }}\n              onInput={e => setEditData(prevState => {\n                return { ...prevState, [e.target.name]: e.target.value }\n              })}\n              \n            /> \n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            <br />\n            Name : &nbsp; &nbsp; &nbsp; \n            <TextField\n              name={'name'}\n              value={editData.name}\n              InputProps={{\n                readOnly: readOnly\n              }}\n              onInput={e => setEditData(prevState => {\n                return { ...prevState, [e.target.name]: e.target.value }\n              })}\n            />\n            <br />\n            Mobile : &nbsp;&nbsp;&nbsp; \n            <TextField\n              name={'mobile'}\n              value={editData.mobile}\n              InputProps={{\n                readOnly: readOnly\n              }}\n              onInput={e => setEditData(prevState => {\n                return { ...prevState, [e.target.name]: e.target.value }\n              })}\n\n            />\n \n          <br />\t\n              Active : &nbsp;&nbsp;&nbsp;\n            <Select\n              name={'is_active'}\n              value={editData.active}\n              InputProps={{\n                readOnly: readOnly\n              }}\n              onInput={e => setEditData(prevState => {\n                return { ...prevState, [e.target.name]: e.target.value }\n              })}\n            />\n          </form>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => updateUser({ ...editData })} color=\"primary\">\n            Update\n          </Button>\n          <Button onClick={changeReadonly} color=\"primary\">\n            Edit\n          </Button>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {/* popup end */}\n    </Paper>\n  );\n} ","/root/Documents/lottery-app/src/Component/Dasdboard.js",["85","86","87","88","89"],"import React, { Component } from 'react'\nimport \"./style-sheet/dashboard.css\"\nimport history from \"../history\";\nimport Axios from 'axios';\nimport { DatePicker, Space } from 'antd';\nimport moment from 'moment-timezone'\nclass Dasdboard extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            userNames: [],\n            userName: \"\",\n            date: new Date(),\n            showTime: \"All\",\n            excess: 0,\n            response: [{}],\n            balance: 0,\n            controll: false\n        }\n    }\n\n    handleUserNameSelection = event => {\n        this.setState({ userName: event.target.value, controll: false })\n        this.remove()\n    }\n\n    handleShowTimeSelection = (event) => {\n        this.setState({ showTime: event.target.value, controll: false })\n        this.remove()\n    }\n\n    dataPicker = (date,datestring) => {\n        this.setState({ date: datestring, controll: false })\n        this.remove()\n    }\n\n    remove() {\n        var array = this.state.response\n        console.log(\"Count:\",array)\n        array.splice(0,array.length);\n        this.setState({respone:array,excess:0,balance:0})\n    }\n\n    componentDidMount() {\n        if (!localStorage.getItem('token')) {\n            Axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/v1/user`).then((response) => {\n                this.setState({ userNames: response.data.data.attributes.data, userName: response.data.data.attributes.data[0]._id })\n            }).catch((err) => {\n            });\n        }\n        else {\n            history.push('/login')\n        }\n\n    }\n    componentDidUpdate() {\n        let i = 0;\n        if (this.state.userName != '') {\n            let data = Object.assign({\n                data: {\n                    attributes: {\n                        user: this.state.userName,\n                        date: this.state.date\n                    }\n                }\n            })\n           \n            if (this.state.showTime != 'All') data.data.attributes['show_time'] = this.state.showTime\n            if (!this.state.controll) {\n                Axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/v1/purchase/dashboard`, data).then((response) => {\n\n                    let res = response.data.data;\n                    while (i < res.length) {\n                        this.state.response[i] = {\n                            sno: i + 1,\n                            name: res[i].name,\n                            qty: res[i].qty,\n                            value: res[i].value,\n                            rate: res[i].rate\n                        }\n                        this.setState({ respone: this.state.response })\n                        i++;\n                    }\n                    this.setState({ excess: response.data.excess, balance: response.data.balance, controll: true })\n\n\n\n                }).catch((err) => {\n                });\n            }\n        }\n\n\n    }\n\n    render() {\n        return (\n            <div className=\"start\">\n                <div className=\"user-status\">\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <div className=\"form-outline\">\n                                <label className=\"form-label\">Username </label>\n                                <select className=\"form-control \" onChange={this.handleUserNameSelection}>\n                                    {this.state.userNames.map((value, index) => <option key={index} value={value._id}>{value.name}</option>)}\n                                </select>\n\n                            </div>\n                        </div>\n                        <div className=\"col\">\n                            <div className=\"form-outline\">\n                                <label className=\"form-label\">DatePicker </label>\n                                <DatePicker  className=\"form-control\" defaultValue={moment(new Date, 'YYYY-MM-DD')} format={'YYYY-MM-DD'} onChange={this.dataPicker} />\n                            </div>\n                        </div>\n                        <div className=\"col\">\n                            <div className=\"form-outline\">\n                                <label className=\"form-label\">Show Time *</label>\n                                <select className=\"form-control\" value={this.state.showTime} onChange={this.handleShowTimeSelection}>\n                                    <option>11:00 AM</option>\n                                    <option> 02:00 AM</option>\n                                    <option> 05:00 PM</option>\n                                    <option> 08:00 PM </option>\n                                    <option> All </option>\n                                </select>\n\n                            </div>\n                        </div>\n\n                    </div>\n\n                </div>\n                <br></br>\n                <div className=\"dashboard\">\n                    <table className=\"table\">\n                        <thead className=\"thead-dark \">\n                            <tr>\n                                <th scope=\"col\">Sno</th>\n                                <th scope=\"col\">Ticket Name</th>\n                                <th scope=\"col\">Qty</th>\n                                <th scope=\"col\"> Rate</th>\n                                <th scope=\"col\"> Value </th>\n\n                            </tr>\n                        </thead>\n                        <tbody>\n\n                            {\n\n                                this.state.response.map((value) => {\n                                    return (<tr>\n                                        <th scope=\"row\">{value.sno}</th>\n                                        <td>{value.name}</td>\n                                        <td>{value.qty}</td>\n                                        <td>{value.rate}</td>\n                                        <td>{value.value}</td>\n                                    </tr>)\n\n                                })\n\n                            }\n\n\n                            {/* <tr>\n                               \n                                <td>Mark</td>\n                                <td>Otto</td>\n                                <td>@mdo</td>\n                            </tr>\n                            <tr>\n                                <th scope=\"row\">2</th>\n                                <td>Jacob</td>\n                                <td>Thornton</td>\n                                <td>@fat</td>\n                            </tr>\n                            <tr>\n                                <th scope=\"row\">3</th>\n                                <td>Larry</td>\n                                <td>the Bird</td>\n                                <td>@twitter</td>\n                            </tr> */}\n\n                        </tbody>\n                    </table>\n                </div>\n                <div className='row'>\n                    <div className=\"col\">\n                        <h4>Excess : {this.state.excess}</h4>\n                    </div>\n                    <div className=\"col\">\n                        <h4>Balance : {this.state.balance}</h4>\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n}\n\nexport default Dasdboard\n","/root/Documents/lottery-app/src/Component/manage-ticket.js",["90","91","92"],"/root/Documents/lottery-app/src/Component/header.js",[],["93","94"],"/root/Documents/lottery-app/src/Component/viewTickets.js",[],"/root/Documents/lottery-app/src/Component/tablePagation/manageTicketPagenation.js",["95","96","97","98","99","100","101","102","103","104"],"import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Axios from 'axios';\n// popup\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport TextField from '@material-ui/core/TextField';\nconst URL = `${process.env.REACT_APP_API_BASE_URL}`;\n//popup\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\nconst columns = [\n  \n  { id: 'name', label: 'Name', minWidth: 100 },\n  {\n    id: 'price',\n    label: 'Price',\n    minWidth: 100,\n    align: 'right'\n  },\n  {\n    id: 'created_date',\n    label: 'Create Date',\n    minWidth: 100,\n    align: 'right'\n  }\n];\nconst ticketColumns = [\n  {id: 'combination', label: 'Combination',minWidth: 100},\n  {id: 'prize', label: 'Prize',minWidth: 100,}\n]\nconst useStyles = makeStyles({\n  root: {\n    width: '80%',\n    margin: `3% 0 0 10%`,\n  },\n  container: {\n    maxHeight: 440,\n  },\n});\nexport default function StickyHeadTable() {\n  const classes = useStyles();\n  const [rows, setRow] = React.useState([])\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  // popup\n  const [editData, setEditData] = React.useState({});\n  const [readOnly, setReadOnly] = React.useState(true);\n  const [open, setOpen] = React.useState(false);\n  const [tickets, setTickets] = React.useState([]);\n  const [ticketLoading, setTicketLoading] = React.useState(false);\n  // popup\n  const handleClose = () => {\n    setOpen(false);\n    setTicketLoading(false);\n    setTickets([])\n    setReadOnly(true)\n  };\n  // component did mount\n  useEffect(async () => {\n    let { data } = await Axios.get(`${URL}/api/v1/master`);\n    // let { data } = await Axios.get(`${URL}/api/v1/user?page_no=${page}&limit=${rowsPerPage}`);\n    console.log(data.data.attributes.data)\n    setRow(data.data.attributes.data);\n  }, []);\n  // our custom function\n  const userPagination = async (event, something) => {\n    let { data } = await Axios.get(`${URL}/api/v1/master`);\n    // let { data } = await Axios.get(`${URL}/api/v1/user?page_no=${something}&limit=${rowsPerPage}`);\n    setRow(data.data.attributes.data);\n    setRowsPerPage(+rowsPerPage);\n    setPage(something);\n  }\n  // it call whenever rowsperpage changes\n  useEffect(() => {\n    userPagination(rowsPerPage, 0)\n  }, [rowsPerPage]);\n  // popup\n  const updateUser = async (payload) => {\n    console.log('payload', payload)\n    let { data } = await Axios.patch(`${URL}/api/v1/user/${payload._id}`, {\n      data: {\n        attributes: {\n          email: payload.email\n        }\n      }\n    });\n    console.log('update data result', data);\n    userPagination(rowsPerPage, 0)\n    setOpen(false);\n    setReadOnly(true);\n  }\n  const getTicket = async (a) => {\n    setTicketLoading(true)\n    let { data } = await Axios.get(`${URL}/api/v1/ticket/${a._id}`);\n    console.log(data.data.attributes)\n    setTickets(data.data.attributes.data);\n    setTicketLoading(false);\n  }\n  function rowClick(a) {\n    console.log(a);\n    // setEditData(a);\n    getTicket(a)\n    setOpen(true);\n  }\n  // popup\n  const changeReadonly = () => {\n    setReadOnly(false)\n  }\n  // change rows per page\n  const handleChangeRowsPerPage = async (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n  return (\n    // const classes = useStyles();\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow selected={true}>\n              {columns.map((column) => (\n                <TableCell\n                  key={column._id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code} onClick={() => rowClick(row)}>\n                  {columns.map((column) => {\n                    const value = row[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'number' ? value : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 20, 25, 100]} // we can set whatever we want\n        component=\"div\"\n        count={29} // !! important ---> need to set total count of records\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={userPagination} // our custom function (NEXT, PREV) button\n        onChangeRowsPerPage={handleChangeRowsPerPage} // rows per page function\n      />\n      {/* popup start */}\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        disableBackdropClick={true}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\">{\"Tickets\"}</DialogTitle>\n        <DialogContent>\n          <Table stickyHeader aria-label=\"sticky table\">\n            <TableHead>\n              <TableRow selected={true}>\n                {ticketColumns.map((column) => (\n                  <TableCell\n                    key={column._id}\n                    align={column.align}\n                    style={{ minWidth: column.minWidth }}\n                  >\n                    {column.label}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {/* {tickets.length > 0} */}\n              {tickets.length > 0 ? tickets.map((row) => {\n                return (\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code} onClick={() => rowClick(row)}>\n                    {ticketColumns.map((column) => {\n                      const value = row[column.id];\n                      return (\n                        <TableCell key={column.id} align={column.align}>\n                          {column.format && typeof value === 'number' ? value : value}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              }): <TableRow>\n                <TableCell>  </TableCell>\n                <TableCell style={{textAlign: 'center'}}> No Data </TableCell>\n                <TableCell>  </TableCell>\n                </TableRow>}\n            </TableBody>\n          </Table>\n          {/* <form className={classes.container}  >\n            <TextField\n              name={'email'}\n              value={editData.email}\n              inputProps={{\n                readOnly: readOnly\n              }}\n              onInput={e => setEditData(prevState => {\n                return {...prevState, [e.target.name]:e.target.value}\n              })}\n            /> <br />\n            <TextField\n              name={'name'}\n              value={editData.name}\n              InputProps={{\n                readOnly: readOnly\n              }}\n              onInput={e => setEditData(prevState => {\n                return {...prevState, [e.target.name]:e.target.value}\n              })}\n            />\n          </form> */}\n        </DialogContent>\n        <DialogActions>\n          {/* <Button onClick={() => updateUser({ ...editData })} color=\"primary\">\n            Update\n          </Button> */}\n          {/* <Button onClick={changeReadonly} color=\"primary\">\n            Edit\n          </Button> */}\n          <Button onClick={handleClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {/* popup end */}\n    </Paper>\n  );\n}","/root/Documents/lottery-app/src/Component/tablePagation/searchManageTicket.js",["105","106","107","108","109","110","111","112","113","114","115","116"],"import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Axios from 'axios';\n// popup\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport TextField from '@material-ui/core/TextField';\nconst URL = `${process.env.REACT_APP_API_BASE_URL}`;\n//popup\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\nconst columns = [\n\n  { id: 'name', label: 'Name', minWidth: 100 },\n  {\n    id: 'price',\n    label: 'Price',\n    minWidth: 100,\n    align: 'right'\n  },\n  {\n    id: 'created_date',\n    label: 'Create Date',\n    minWidth: 100,\n    align: 'right'\n  }\n];\nconst ticketColumns = [\n  { id: 'combination', label: 'Combination', minWidth: 100 },\n  { id: 'prize', label: 'Prize', minWidth: 100, }\n]\nconst useStyles = makeStyles({\n  root: {\n    width: '80%',\n    margin: `3% 0 0 10%`,\n  },\n  container: {\n    maxHeight: 440,\n  },\n});\nexport default function StickyHeadTable(props) {\n\n  const classes = useStyles();\n  const [rows, setRow] = React.useState([])\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [searchName, setSearchName] = React.useState();\n\n  // popup\n  const [editData, setEditData] = React.useState({});\n  const [readOnly, setReadOnly] = React.useState(true);\n  const [open, setOpen] = React.useState(false);\n  const [tickets, setTickets] = React.useState([]);\n  const [ticketLoading, setTicketLoading] = React.useState(false);\n\n  //  setSearchName(props.searchName)\n  // popup\n\n  const handleClose = () => {\n    setOpen(false);\n    setTicketLoading(false);\n    setTickets([])\n    setReadOnly(true)\n  };\n\n  // component did mount\n  useEffect(async () => {\n\n    let { data } = await Axios.get(`${URL}/api/v1/master?name=${props.searchName}`);\n    // let { data } = await Axios.get(`${URL}/api/v1/user?page_no=${page}&limit=${rowsPerPage}`);\n    console.log(data.data.attributes.data)\n    setRow(data.data.attributes.data);\n  }, []);\n\n\n  // our custom function\n  const userPagination = async (event, something) => {\n    let { data } = await Axios.get(`${URL}/api/v1/master?name=${props.searchName}`);\n    // let { data } = await Axios.get(`${URL}/api/v1/user?page_no=${something}&limit=${rowsPerPage}`);\n    setRow(data.data.attributes.data);\n    setRowsPerPage(+rowsPerPage);\n    setPage(something);\n  }\n  // it call whenever rowsperpage changes\n  useEffect(() => {\n    userPagination(rowsPerPage, 0)\n  }, [rowsPerPage]);\n  // // popup\n  // const updateUser = async (payload) => {\n  //   console.log('payload', payload)\n  //   let { data } = await Axios.patch(`${URL}/api/v1/user/${payload._id}`, {\n  //     data: {\n  //       attributes: {\n  //         email: payload.email\n  //       }\n  //     }\n  //   });\n  //   console.log('update data result', data);\n  //   userPagination(rowsPerPage, 0)\n  //   setOpen(false);\n  //   setReadOnly(true);\n  // }\n  const getTicket = async (a) => {\n    setTicketLoading(true)\n    let { data } = await Axios.get(`${URL}/api/v1/ticket/${a._id}`);\n    console.log(data.data.attributes)\n    setTickets(data.data.attributes.data);\n    setTicketLoading(false);\n  }\n  function rowClick(a) {\n    console.log(a);\n    // setEditData(a);\n    getTicket(a)\n    setOpen(true);\n  }\n  // popup\n  const changeReadonly = () => {\n    setReadOnly(false)\n  }\n  // change rows per page\n  const handleChangeRowsPerPage = async (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n  return (\n    // const classes = useStyles();\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow selected={true}>\n              {columns.map((column) => (\n                <TableCell\n                  key={column._id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code} onClick={() => rowClick(row)}>\n                  {columns.map((column) => {\n                    const value = row[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'number' ? value : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 20, 25, 100]} // we can set whatever we want\n        component=\"div\"\n        count={29} // !! important ---> need to set total count of records\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={userPagination} // our custom function (NEXT, PREV) button\n        onChangeRowsPerPage={handleChangeRowsPerPage} // rows per page function\n      />\n      {/* popup start */}\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        disableBackdropClick={true}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\">{\"Tickets\"}</DialogTitle>\n        <DialogContent>\n          <Table stickyHeader aria-label=\"sticky table\">\n            <TableHead>\n              <TableRow selected={true}>\n                {ticketColumns.map((column) => (\n                  <TableCell\n                    key={column._id}\n                    align={column.align}\n                    style={{ minWidth: column.minWidth }}\n                  >\n                    {column.label}\n                  </TableCell>\n                ))}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {/* {tickets.length > 0} */}\n              {tickets.length > 0 ? tickets.map((row) => {\n                return (\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code} onClick={() => rowClick(row)}>\n                    {ticketColumns.map((column) => {\n                      const value = row[column.id];\n                      return (\n                        <TableCell key={column.id} align={column.align}>\n                          {column.format && typeof value === 'number' ? value : value}\n                        </TableCell>\n                      );\n                    })}\n                  </TableRow>\n                );\n              }) : <TableRow>\n                  <TableCell>  </TableCell>\n                  <TableCell style={{ textAlign: 'center' }}> No Data </TableCell>\n                  <TableCell>  </TableCell>\n                </TableRow>}\n            </TableBody>\n          </Table>\n          {/* <form className={classes.container}  >\n            <TextField\n              name={'email'}\n              value={editData.email}\n              inputProps={{\n                readOnly: readOnly\n              }}\n              onInput={e => setEditData(prevState => {\n                return {...prevState, [e.target.name]:e.target.value}\n              })}\n            /> <br />\n            <TextField\n              name={'name'}\n              value={editData.name}\n              InputProps={{\n                readOnly: readOnly\n              }}\n              onInput={e => setEditData(prevState => {\n                return {...prevState, [e.target.name]:e.target.value}\n              })}\n            />\n          </form> */}\n        </DialogContent>\n        <DialogActions>\n          {/* <Button onClick={() => updateUser({ ...editData })} color=\"primary\">\n            Update\n          </Button> */}\n          {/* <Button onClick={changeReadonly} color=\"primary\">\n            Edit\n          </Button> */}\n          <Button onClick={handleClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {/* popup end */}\n    </Paper>\n  );\n}",{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":81,"column":9,"nodeType":"123","endLine":81,"endColumn":32},{"ruleId":"121","severity":1,"message":"122","line":86,"column":9,"nodeType":"123","endLine":86,"endColumn":32},{"ruleId":"121","severity":1,"message":"122","line":102,"column":17,"nodeType":"123","endLine":102,"endColumn":34},{"ruleId":"124","severity":1,"message":"125","line":4,"column":8,"nodeType":"126","messageId":"127","endLine":4,"endColumn":11},{"ruleId":"124","severity":1,"message":"128","line":7,"column":8,"nodeType":"126","messageId":"127","endLine":7,"endColumn":17},{"ruleId":"124","severity":1,"message":"129","line":1,"column":28,"nodeType":"126","messageId":"127","endLine":1,"endColumn":37},{"ruleId":"124","severity":1,"message":"130","line":3,"column":8,"nodeType":"126","messageId":"127","endLine":3,"endColumn":18},{"ruleId":"124","severity":1,"message":"131","line":4,"column":8,"nodeType":"126","messageId":"127","endLine":4,"endColumn":16},{"ruleId":"124","severity":1,"message":"132","line":5,"column":8,"nodeType":"126","messageId":"127","endLine":5,"endColumn":21},{"ruleId":"124","severity":1,"message":"133","line":6,"column":8,"nodeType":"126","messageId":"127","endLine":6,"endColumn":19},{"ruleId":"134","severity":1,"message":"135","line":83,"column":13,"nodeType":"136","endLine":88,"endColumn":4},{"ruleId":"134","severity":1,"message":"137","line":88,"column":6,"nodeType":"138","endLine":88,"endColumn":8,"suggestions":"139"},{"ruleId":"134","severity":1,"message":"140","line":100,"column":6,"nodeType":"138","endLine":100,"endColumn":19,"suggestions":"141"},{"ruleId":"124","severity":1,"message":"142","line":13,"column":3,"nodeType":"126","messageId":"127","endLine":13,"endColumn":11},{"ruleId":"124","severity":1,"message":"143","line":18,"column":8,"nodeType":"126","messageId":"127","endLine":18,"endColumn":25},{"ruleId":"134","severity":1,"message":"135","line":75,"column":13,"nodeType":"136","endLine":79,"endColumn":4},{"ruleId":"134","severity":1,"message":"144","line":79,"column":6,"nodeType":"138","endLine":79,"endColumn":8,"suggestions":"145"},{"ruleId":"134","severity":1,"message":"140","line":90,"column":6,"nodeType":"138","endLine":90,"endColumn":19,"suggestions":"146"},{"ruleId":"124","severity":1,"message":"147","line":5,"column":22,"nodeType":"126","messageId":"127","endLine":5,"endColumn":27},{"ruleId":"148","severity":1,"message":"149","line":59,"column":33,"nodeType":"150","messageId":"151","endLine":59,"endColumn":35},{"ruleId":"148","severity":1,"message":"149","line":69,"column":37,"nodeType":"150","messageId":"151","endLine":69,"endColumn":39},{"ruleId":"121","severity":1,"message":"122","line":75,"column":25,"nodeType":"123","endLine":75,"endColumn":44},{"ruleId":"152","severity":1,"message":"153","line":114,"column":92,"nodeType":"154","messageId":"155","endLine":114,"endColumn":100,"fix":"156"},{"ruleId":"121","severity":1,"message":"122","line":38,"column":9,"nodeType":"123","endLine":38,"endColumn":32},{"ruleId":"121","severity":1,"message":"122","line":43,"column":9,"nodeType":"123","endLine":43,"endColumn":37},{"ruleId":"121","severity":1,"message":"122","line":86,"column":17,"nodeType":"123","endLine":86,"endColumn":34},{"ruleId":"117","replacedBy":"157"},{"ruleId":"119","replacedBy":"158"},{"ruleId":"124","severity":1,"message":"143","line":17,"column":8,"nodeType":"126","messageId":"127","endLine":17,"endColumn":25},{"ruleId":"124","severity":1,"message":"159","line":20,"column":8,"nodeType":"126","messageId":"127","endLine":20,"endColumn":17},{"ruleId":"124","severity":1,"message":"160","line":61,"column":10,"nodeType":"126","messageId":"127","endLine":61,"endColumn":18},{"ruleId":"124","severity":1,"message":"161","line":61,"column":20,"nodeType":"126","messageId":"127","endLine":61,"endColumn":31},{"ruleId":"124","severity":1,"message":"162","line":62,"column":10,"nodeType":"126","messageId":"127","endLine":62,"endColumn":18},{"ruleId":"124","severity":1,"message":"163","line":65,"column":10,"nodeType":"126","messageId":"127","endLine":65,"endColumn":23},{"ruleId":"134","severity":1,"message":"135","line":74,"column":13,"nodeType":"136","endLine":79,"endColumn":4},{"ruleId":"134","severity":1,"message":"140","line":91,"column":6,"nodeType":"138","endLine":91,"endColumn":19,"suggestions":"164"},{"ruleId":"124","severity":1,"message":"165","line":93,"column":9,"nodeType":"126","messageId":"127","endLine":93,"endColumn":19},{"ruleId":"124","severity":1,"message":"166","line":121,"column":9,"nodeType":"126","messageId":"127","endLine":121,"endColumn":23},{"ruleId":"124","severity":1,"message":"143","line":17,"column":8,"nodeType":"126","messageId":"127","endLine":17,"endColumn":25},{"ruleId":"124","severity":1,"message":"159","line":20,"column":8,"nodeType":"126","messageId":"127","endLine":20,"endColumn":17},{"ruleId":"124","severity":1,"message":"167","line":61,"column":10,"nodeType":"126","messageId":"127","endLine":61,"endColumn":20},{"ruleId":"124","severity":1,"message":"168","line":61,"column":22,"nodeType":"126","messageId":"127","endLine":61,"endColumn":35},{"ruleId":"124","severity":1,"message":"160","line":64,"column":10,"nodeType":"126","messageId":"127","endLine":64,"endColumn":18},{"ruleId":"124","severity":1,"message":"161","line":64,"column":20,"nodeType":"126","messageId":"127","endLine":64,"endColumn":31},{"ruleId":"124","severity":1,"message":"162","line":65,"column":10,"nodeType":"126","messageId":"127","endLine":65,"endColumn":18},{"ruleId":"124","severity":1,"message":"163","line":68,"column":10,"nodeType":"126","messageId":"127","endLine":68,"endColumn":23},{"ruleId":"134","severity":1,"message":"135","line":81,"column":13,"nodeType":"136","endLine":87,"endColumn":4},{"ruleId":"134","severity":1,"message":"169","line":87,"column":6,"nodeType":"138","endLine":87,"endColumn":8,"suggestions":"170"},{"ruleId":"134","severity":1,"message":"140","line":101,"column":6,"nodeType":"138","endLine":101,"endColumn":19,"suggestions":"171"},{"ruleId":"124","severity":1,"message":"166","line":131,"column":9,"nodeType":"126","messageId":"127","endLine":131,"endColumn":23},"no-native-reassign",["172"],"no-negated-in-lhs",["173"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-unused-vars","'env' is defined but never used.","Identifier","unusedVar","'Dashboard' is defined but never used.","'Component' is defined but never used.","'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","'ListSubheader' is defined but never used.","'FormControl' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'page' and 'rowsPerPage'. Either include them or remove the dependency array.","ArrayExpression",["174"],"React Hook useEffect has a missing dependency: 'userPagination'. Either include it or remove the dependency array.",["175"],"'Redirect' is defined but never used.","'DialogContentText' is defined but never used.","React Hook useEffect has missing dependencies: 'page', 'props.searchName', and 'rowsPerPage'. Either include them or remove the dependency array.",["176"],["177"],"'Space' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"178","text":"179"},["172"],["173"],"'TextField' is defined but never used.","'editData' is assigned a value but never used.","'setEditData' is assigned a value but never used.","'readOnly' is assigned a value but never used.","'ticketLoading' is assigned a value but never used.",["180"],"'updateUser' is assigned a value but never used.","'changeReadonly' is assigned a value but never used.","'searchName' is assigned a value but never used.","'setSearchName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.searchName'. Either include it or remove the dependency array.",["181"],["182"],"no-global-assign","no-unsafe-negation",{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"185","fix":"189"},[3922,3922],"()",{"desc":"185","fix":"190"},{"desc":"191","fix":"192"},{"desc":"185","fix":"193"},"Update the dependencies array to be: [page, rowsPerPage]",{"range":"194","text":"195"},"Update the dependencies array to be: [rowsPerPage, userPagination]",{"range":"196","text":"197"},"Update the dependencies array to be: [page, props.searchName, rowsPerPage]",{"range":"198","text":"199"},{"range":"200","text":"197"},{"range":"201","text":"197"},"Update the dependencies array to be: [props.searchName]",{"range":"202","text":"203"},{"range":"204","text":"197"},[2654,2656],"[page, rowsPerPage]",[3043,3056],"[rowsPerPage, userPagination]",[2531,2533],"[page, props.searchName, rowsPerPage]",[2944,2957],[3106,3119],[2789,2791],"[props.searchName]",[3267,3280]]
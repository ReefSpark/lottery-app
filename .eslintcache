[{"/root/Documents/lottery-app/src/index.js":"1","/root/Documents/lottery-app/src/Component/login.js":"2","/root/Documents/lottery-app/src/App.js":"3","/root/Documents/lottery-app/src/Component/manage-ticket.js":"4","/root/Documents/lottery-app/src/Component/Dasdboard.js":"5","/root/Documents/lottery-app/src/Component/tablePagation/tablePagenation.js":"6","/root/Documents/lottery-app/src/Component/header.js":"7","/root/Documents/lottery-app/src/Component/purchase-ticket.js":"8","/root/Documents/lottery-app/src/Component/user.js":"9","/root/Documents/lottery-app/src/reportWebVitals.js":"10","/root/Documents/lottery-app/src/Component/tablePagation/searchPagenation.js":"11","/root/Documents/lottery-app/src/Component/tablePagation/manageTicketPagenation.js":"12","/root/Documents/lottery-app/src/history.js":"13"},{"size":553,"mtime":1610476388196,"results":"14","hashOfConfig":"15"},{"size":2842,"mtime":1610476131368,"results":"16","hashOfConfig":"15"},{"size":1197,"mtime":1610477485361,"results":"17","hashOfConfig":"15"},{"size":8348,"mtime":1610478595357,"results":"18","hashOfConfig":"15"},{"size":7507,"mtime":1611071790208,"results":"19","hashOfConfig":"15"},{"size":9455,"mtime":1611065986952,"results":"20","hashOfConfig":"15"},{"size":2673,"mtime":1610477302245,"results":"21","hashOfConfig":"15"},{"size":9454,"mtime":1611058845928,"results":"22","hashOfConfig":"15"},{"size":6724,"mtime":1610483274973,"results":"23","hashOfConfig":"15"},{"size":362,"mtime":1609182483000,"results":"24","hashOfConfig":"15"},{"size":8090,"mtime":1610484897249,"results":"25","hashOfConfig":"15"},{"size":8786,"mtime":1611064909336,"results":"26","hashOfConfig":"15"},{"size":106,"mtime":1610457392000,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17s6qvr",{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"/root/Documents/lottery-app/src/index.js",[],"/root/Documents/lottery-app/src/Component/login.js",["60","61"],"import React, { Component } from 'react'\nimport \"./style-sheet/login.css\"\nimport Axios from 'axios'\nimport env from 'dotenv'\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Dashboard from './header'\n\nclass Login extends Component {\n    constructor() {\n        super()\n        this.state = {\n            email: \"\",\n            password: \"\",\n            message: \"\",\n            enable: true\n        }\n    }\n\n    handleText = event => {\n        this.setState({ email: event.target.value })\n    }\n    handlePasswordText = (event) => {\n        this.setState({ password: event.target.value })\n    }\n\n    validate = () => {\n        let emailerror = '';\n        let passworderror = '';\n        if (!this.state.password) {\n            passworderror = \"password cannot be blank\"\n        }\n        if (!this.state.email.includes(\"@\")) {\n            emailerror = 'Enter valid email'\n        }\n        if (emailerror || passworderror) {\n            this.setState({ emailerror: emailerror, passworderror: passworderror })\n            return false\n        }\n        return true\n    }\n\n    loginSumbit = (event) => {\n        this.getReponse()\n        event.preventDefault()\n    }\n\n    async getReponse() {\n        const isValid = this.validate();\n        if (isValid) {\n            return Axios.post('http://d3e6edc66610.ngrok.io/api/v1/user/login', { data: { attributes: { email: this.state.email, password: this.state.password } } }).then((response) => {\n                this.setState({ message: response.data.data.attributes.message })\n                console.log(response.data.data.attributes.message)\n                toast.success(this.state.message);\n                localStorage.setItem('token', 'user');\n            }).catch((err) => {\n                this.setState({ message: err.response.data.data.attributes.message })\n                return toast.error(this.state.message);\n\n            });\n        }\n\n\n\n    }\n\n\n    render() {\n        return (\n            <div>\n                <div className=\"login-phase\">\n                    <div className=\"login-controll\">\n                        <input type=\"text\" placeholder=\"Email\" value={this.state.email} onChange={this.handleText} /><br></br>\n                        <input type=\"password\" placeholder=\"Password\" value={this.state.password} onChange={this.handlePasswordText} /><br></br>\n                        <button type=\"button\" className=\"btn btn-primary btn-lg \" id=\"load1\" data-loading-text=\"<i className='fa fa-circle-o-notch fa-spin'></i> Processing Order\" onClick={this.loginSumbit}>Login</button>\n                    </div>\n\n                </div>\n                < ToastContainer\n                    position=\"bottom-right\"\n                    autoClose={3000} />\n\n            </div>\n        )\n    }\n}\n\nexport default Login\n","/root/Documents/lottery-app/src/App.js",["62","63"],"\nimport './App.css';\nimport Login from './Component/login'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport history from './history';\nimport Dashboard from './Component/header'\nimport User from './Component/header'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <Dashboard/> */}\n      <Switch>\n        <Router history={history}>\n          {/* <Route\n                exact\n                path=\"/\"\n                render={() => {\n                    return (\n                      !localStorage.getItem('token') ?\n                      <Redirect to=\"/login\" /> :\n                      <Redirect to=\"/dashboard\" /> \n                    )\n                }}\n              /> */}\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/dashboard\" component={Dashboard} />\n          <Route exact path=\"/users\" component={Dashboard} />\n          <Route exact path=\"/manage-tickets\" component={Dashboard} />\n          <Route exact path=\"/purchase-ticket\" component={Dashboard} />\n        </Router>\n      </Switch>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","/root/Documents/lottery-app/src/Component/manage-ticket.js",["64","65","66"],"/root/Documents/lottery-app/src/Component/Dasdboard.js",["67","68","69","70"],"/root/Documents/lottery-app/src/Component/tablePagation/tablePagenation.js",["71","72","73"],"/root/Documents/lottery-app/src/Component/header.js",[],["74","75"],"/root/Documents/lottery-app/src/Component/purchase-ticket.js",["76","77","78"],"import React, { Component } from 'react';\nimport './style-sheet/purchase-ticket.css'\nimport _ from 'lodash';\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Axios from 'axios'\n\nclass PurchaseTicket extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            userNames: [],\n            ticketNames: [],\n            userName: \"\",\n            ticketName: '',\n            quantity: 0,\n            showTime: '11:00',\n            actualPrice: 0,\n            ticketNumber: [],\n            sellingPrice: [],\n            ticketNumberError: '',\n            sellingPriceError: '',\n            message: '',\n            values: [{}]\n        }\n\n    }\n    validate = () => {\n        let ticketNumberError = '', sellingPriceError = ''\n        if (this.state.ticketNumber.length === 0) {\n            ticketNumberError = \"Ticket Number cannot be blank\"\n        }\n        if (this.state.sellingPrice.length === 0) {\n            sellingPriceError = \"Selling Price cannot be blank\"\n        }\n        if (ticketNumberError || sellingPriceError) {\n            this.setState({ ticketNumberError: ticketNumberError, sellingPriceError: sellingPriceError });\n            return false\n        }\n        return true\n    }\n    componentDidMount() {\n\n        Axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/v1/user`).then((response) => {\n\n            this.setState({ userNames: response.data.data.attributes.data, userName: response.data.data.attributes.data[0]._id })\n\n        }).catch((err) => {\n        });\n        Axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/v1/master`).then((response) => {\n            this.setState({ ticketNames: response.data.data.attributes.data, actualPrice: response.data.data.attributes.data[0].price, ticketName: response.data.data.attributes.data[0]._id })\n        }).catch((err) => {\n        });\n    }\n    componentDidUpdate() {\n        this.setState({ quantity: 0 })\n    }\n\n    handleUserNameSelection = event => {\n        this.setState({ userName: event.target.value })\n    }\n    handleTicketSelection = event => {\n\n        let i = 0;\n        let ticketIndex = this.state.ticketNames;\n        while (i < ticketIndex.length) {\n            if (ticketIndex[i]._id === event.target.value) {\n                this.setState({ ticketName: event.target.value, actualPrice: ticketIndex[i].price })\n            }\n            i++;\n        }\n    }\n    handleQuantitySelection = event => {\n        this.setState({ quantity: event.target.value })\n    }\n    handleShowTimeSelection = event => {\n\n        this.setState({ showTime: event.target.value })\n    }\n    handleText = (i, event) => {\n        this.state.ticketNumber[i] = event.target.value.toUpperCase()\n        this.setState({ ticketNumber: this.state.ticketNumber })\n    }\n\n    handleSellingPrice = (i, event) => {\n        this.state.sellingPrice[i] = event.target.value.toUpperCase()\n        this.setState({ sellingPrice: this.state.sellingPrice })\n    }\n\n    removeSumbit = () => {\n        let count = this.state.quantity;\n        this.setState({ quantity: --count })\n    }\n    purchaseSumbit = () => {\n        const isValid = this.validate();\n        console.log(isValid)\n        if (isValid) {\n            let i = 0;\n            let ticketNumberCount = this.state.ticketNumber\n            let sellingPriceCount = this.state.sellingPrice\n            while (i < ticketNumberCount.length) {\n                this.state.values[i] = {\n                    user_id: this.state.userName,\n                    ticket_master_id: this.state.ticketName,\n                    actual_price: this.state.actualPrice,\n                    ticket_number: ticketNumberCount[i],\n                    show_time: this.state.showTime,\n                    sell_price: sellingPriceCount[i],\n                    date: new Date()\n                }\n                this.setState({ values: this.state.values })\n                i++\n            }\n            let data = Object.assign({\n                data: {\n                    attributes: this.state.values\n                }\n            })\n            return Axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/v1/purchase/${this.state.userName}`, data).then((response) => {\n                if (response.status === 200)\n                    this.setState({ message: response.data.data.attributes.message })\n                toast.success(this.state.message);\n            }).catch((err) => {\n                if (err.response.status === 400) {\n                    this.setState({ message: err.response.data.data.attributes.message })\n                    return toast.error(this.state.message);\n                }\n\n\n            });\n        }\n\n\n    }\n\n    render() {\n        var fieldsArray = [];\n        for (let i = 0; i <= this.state.quantity; i++) {\n            fieldsArray.push(\n                <div className=\"row loop-array\">\n                    <div className=\"col\">\n                        <div className=\"form-outline\">\n                            <input type=\"text\" id=\"form8Example1\" className=\"form-control\" onChange={this.handleText.bind(this, i)} />\n                            {this.state.ticketNumberError && (<div style={{ \"color\": \"red\", \"fontSize\": \"12px\" }}>\n                                {this.state.ticketNumberError}\n                            </div>)}\n                        </div>\n                    </div>\n\n                    <div className=\"form-outline\">\n                        <select className=\"form-control\">\n                            <option value={this.state.actualPrice}>{this.state.actualPrice}</option>\n                        </select>\n\n                    </div>\n                    <div className=\"col\">\n                        <div className=\"form-outline\">\n                            <input type=\"email\" id=\"form8Example2\" className=\"form-control\" onChange={this.handleSellingPrice.bind(this, i)} />\n                            {this.state.sellingPriceError && (<div style={{ \"color\": \"red\", \"fontSize\": \"12px\" }}>\n                                {this.state.sellingPriceError}\n                            </div>)}\n                        </div>\n                    </div>\n                </div>\n\n            );\n        }\n        return (\n            <div>\n                <h1 style={{ \"marginTop\": \"3%\" }}>Purchase Ticket</h1>\n                <div className=\"ticket-form\">\n                    <div className=\"form-outline\">\n                        <label className=\"form-label\">Username *</label>\n                        <select className=\"form-controls \" onChange={this.handleUserNameSelection}>\n                            {this.state.userNames.map((value, index) => <option key={index} value={value._id}>{value.name}</option>)}\n                        </select>\n\n                    </div>\n                    <div className=\"form-outline\">\n                        <label className=\"form-label\">Ticket Name *</label>\n                        <select className=\"form-controls\" id=\"dropDownMenu\" onChange={this.handleTicketSelection}>\n                            {this.state.ticketNames.map((value, index) => <option key={index} value={value._id} name=\"hello\">{value.name}</option>)}\n                        </select>\n\n                    </div>\n                    <div className=\"form-outline\">\n                        <label className=\"form-label\">Quantity *</label>\n                        <select className=\"form-controls \" onChange={this.handleQuantitySelection}>\n                            {_.range(1, 50).map(value => <option key={value} value={value}>{value}</option>)}\n                        </select>\n\n                    </div>\n                    <div className=\"form-outline\">\n                        <label className=\"form-label\">Show Time *</label>\n                        <select className=\"form-controls\" value={this.state.showTime} onChange={this.handleShowTimeSelection}>\n                            <option>11:00</option>\n                            <option> 14:00</option>\n                            <option> 17:00 </option>\n                            <option> 20:00 </option>\n                        </select>\n\n                    </div>\n                </div>\n                <br></br>\n                <div className=\"seprate-line\">\n                </div>\n                <div className=\"purchase-ticket-form\">\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <label className=\"form-label\" >Ticket Number *</label>\n                        </div>\n                        <div className=\"col\">\n                            <label className=\"form-label\" >Actual Price *</label>\n                        </div>\n                        <div className=\"col\">\n                            <label className=\"form-label\" >Selling Price *</label>\n                        </div>\n\n                    </div>\n                    {fieldsArray}\n                </div>\n                <div className=\"button-ticket\">\n                    <button className=\"btn  add-user-button\" onClick={this.purchaseSumbit}>Purchase</button>\n                    <button className=\"btn  add-user-button\" onClick={this.removeSumbit}>Remove Action</button>\n                </div>\n                < ToastContainer\n                    position=\"bottom-right\"\n                    autoClose={3000} />\n            </div>\n        )\n    }\n}\n\nexport default PurchaseTicket\n","/root/Documents/lottery-app/src/Component/user.js",[],"/root/Documents/lottery-app/src/reportWebVitals.js",[],"/root/Documents/lottery-app/src/Component/tablePagation/searchPagenation.js",["79","80","81","82"],"import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Select from '@material-ui/core/Select';\nimport Axios from 'axios';\n// popup\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport TextField from '@material-ui/core/TextField';\nimport '../style-sheet/pagination.css'\n\nconst URL = `${process.env.REACT_APP_API_BASE_URL}`;\n//popup\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\nconst columns = [\n  { id: 'name', label: 'Name', minWidth: 100,  align: 'center' },\n  {\n    id: 'mobile',\n    label: 'Mobile',\n    minWidth: 100,\n    align: 'center'\n  },\n  {\n    id: 'email',\n    label: 'Email',\n    minWidth: 100,\n    align: 'center'\n  },\n  {\n    id: 'is_active',\n    label: 'Active',\n    minWidth: 100,\n    align: 'center'\n  },\n];\nconst useStyles = makeStyles({\n  root: {\n    width: '80%',\n    margin:`3% 0 0 10%`,\n  },\n  container: {\n    maxHeight: 440,\n  },\n});\nexport default function StickyHeadTable(props) {\n    console.log({props})\n  const classes = useStyles();\n  const [rows, setRow] = React.useState([])\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  // popup\n  const [editData, setEditData] = React.useState({});\n  const [readOnly, setReadOnly] = React.useState(true);\n  const [open, setOpen] = React.useState(false);\n  // popup\n  const handleClose = () => {\n    setOpen(false);\n    setReadOnly(true)\n  };\n  // component did mount\n  useEffect(async () => {\n    let { data } = await Axios.get(`${URL}/api/v1/user?name=${props.searchName}&page_no=${page}&limit=${rowsPerPage}`);\n    console.log(data.data.attributes.data)\n    setRow(data.data.attributes.data);\n  }, []);\n  // our custom function\n  const userPagination = async (event, something) => {\n    let { data } = await Axios.get(`${URL}/api/v1/user?name=${props.searchName}&page_no=${something}&limit=${rowsPerPage}`);\n    setRow(data.data.attributes.data);\n    setRowsPerPage(+rowsPerPage);\n    setPage(something);\n  }\n  // it call whenever rowsperpage changes\n  useEffect(() => {\n    userPagination(rowsPerPage, 0)\n  }, [rowsPerPage]);\n  // popup\n  const updateUser = async (payload) => {\n    console.log('payload', payload)\n    let { data } = await Axios.patch(`${URL}/api/v1/user/${payload._id}`, {\n      data: {\n        attributes: {\n            email: payload.email,\n            name:payload.name,\n            mobile:payload.mobile,\n            is_active:\"Active\"\n\n        }\n      }\n    });\n    console.log('update data result', data);\n    userPagination(rowsPerPage, 0)\n    setOpen(false);\n    setReadOnly(true);\n  }\n  function rowClick(a) {\n    console.log(a);\n    setEditData(a);\n    setOpen(true);\n  }\n  // popup\n  const changeReadonly = () => {\n    setReadOnly(false)\n  }\n  // change rows per page\n  const handleChangeRowsPerPage = async (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n  return (\n    // const classes = useStyles();\n    <Paper className={classes.root}>\n      <TableContainer className={classes.container}>\n        <Table stickyHeader aria-label=\"sticky table\">\n          <TableHead>\n            <TableRow selected={true}>\n              {columns.map((column) => (\n                <TableCell\n                  key={column._id}\n                  align={column.align}\n                  style={{ minWidth: column.minWidth }}\n                >\n                  {column.label}\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => {\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code} onClick={() => rowClick(row)}>\n                  {columns.map((column) => {\n                    const value = row[column.id];\n                    return (\n                      <TableCell key={column.id} align={column.align}>\n                        {column.format && typeof value === 'number' ? value : value}\n                      </TableCell>\n                    );\n                  })}\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 20, 25, 100]} // we can set whatever we want\n        component=\"div\"\n        count={29} // !! important ---> need to set total count of records\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={userPagination} // our custom function (NEXT, PREV) button\n        onChangeRowsPerPage={handleChangeRowsPerPage} // rows per page function\n      />\n      {/* popup start */}\n      <Dialog \n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n        contentStyle={{width: \"100%\", maxWidth: \"none\"}}\n       \n      >\n        <DialogTitle s>{\"User View\"}</DialogTitle>\n        <DialogContent>\n\n        <form className={classes.container}  >\n            Email : &nbsp; &nbsp; &nbsp; \n            <TextField\n              name={'email'}\n              value={editData.email}\n              inputProps={{\n                readOnly: readOnly\n              }}\n              onInput={e => setEditData(prevState => {\n                return { ...prevState, [e.target.name]: e.target.value }\n              })}\n              \n            /> \n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n            <br />\n            Name : &nbsp; &nbsp; &nbsp; \n            <TextField\n              name={'name'}\n              value={editData.name}\n              InputProps={{\n                readOnly: readOnly\n              }}\n              onInput={e => setEditData(prevState => {\n                return { ...prevState, [e.target.name]: e.target.value }\n              })}\n            />\n            <br />\n            Mobile : &nbsp;&nbsp;&nbsp; \n            <TextField\n              name={'mobile'}\n              value={editData.mobile}\n              InputProps={{\n                readOnly: readOnly\n              }}\n              onInput={e => setEditData(prevState => {\n                return { ...prevState, [e.target.name]: e.target.value }\n              })}\n\n            />\n \n          <br />\t\n              Active : &nbsp;&nbsp;&nbsp;\n            <Select\n              name={'is_active'}\n              value={editData.active}\n              InputProps={{\n                readOnly: readOnly\n              }}\n              onInput={e => setEditData(prevState => {\n                return { ...prevState, [e.target.name]: e.target.value }\n              })}\n            />\n          </form>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => updateUser({ ...editData })} color=\"primary\">\n            Update\n          </Button>\n          <Button onClick={changeReadonly} color=\"primary\">\n            Edit\n          </Button>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n      {/* popup end */}\n    </Paper>\n  );\n} ","/root/Documents/lottery-app/src/Component/tablePagation/manageTicketPagenation.js",["83","84","85","86","87","88","89","90","91","92"],"/root/Documents/lottery-app/src/history.js",[],["93","94"],{"ruleId":"95","severity":1,"message":"96","line":4,"column":8,"nodeType":"97","messageId":"98","endLine":4,"endColumn":11},{"ruleId":"95","severity":1,"message":"99","line":7,"column":8,"nodeType":"97","messageId":"98","endLine":7,"endColumn":17},{"ruleId":"95","severity":1,"message":"100","line":7,"column":8,"nodeType":"97","messageId":"98","endLine":7,"endColumn":12},{"ruleId":"95","severity":1,"message":"101","line":12,"column":3,"nodeType":"97","messageId":"98","endLine":12,"endColumn":11},{"ruleId":"102","severity":1,"message":"103","line":37,"column":9,"nodeType":"104","endLine":37,"endColumn":32},{"ruleId":"102","severity":1,"message":"103","line":42,"column":9,"nodeType":"104","endLine":42,"endColumn":37},{"ruleId":"102","severity":1,"message":"103","line":80,"column":17,"nodeType":"104","endLine":80,"endColumn":34},{"ruleId":"95","severity":1,"message":"105","line":6,"column":8,"nodeType":"97","messageId":"98","endLine":6,"endColumn":14},{"ruleId":"106","severity":1,"message":"107","line":49,"column":33,"nodeType":"108","messageId":"109","endLine":49,"endColumn":35},{"ruleId":"106","severity":1,"message":"107","line":60,"column":33,"nodeType":"108","messageId":"109","endLine":60,"endColumn":35},{"ruleId":"95","severity":1,"message":"110","line":93,"column":13,"nodeType":"97","messageId":"98","endLine":93,"endColumn":14},{"ruleId":"111","severity":1,"message":"112","line":78,"column":13,"nodeType":"113","endLine":82,"endColumn":4},{"ruleId":"111","severity":1,"message":"114","line":82,"column":6,"nodeType":"115","endLine":82,"endColumn":8,"suggestions":"116"},{"ruleId":"111","severity":1,"message":"117","line":93,"column":6,"nodeType":"115","endLine":93,"endColumn":19,"suggestions":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"102","severity":1,"message":"103","line":81,"column":9,"nodeType":"104","endLine":81,"endColumn":32},{"ruleId":"102","severity":1,"message":"103","line":86,"column":9,"nodeType":"104","endLine":86,"endColumn":32},{"ruleId":"102","severity":1,"message":"103","line":102,"column":17,"nodeType":"104","endLine":102,"endColumn":34},{"ruleId":"95","severity":1,"message":"123","line":18,"column":8,"nodeType":"97","messageId":"98","endLine":18,"endColumn":25},{"ruleId":"111","severity":1,"message":"112","line":75,"column":13,"nodeType":"113","endLine":79,"endColumn":4},{"ruleId":"111","severity":1,"message":"124","line":79,"column":6,"nodeType":"115","endLine":79,"endColumn":8,"suggestions":"125"},{"ruleId":"111","severity":1,"message":"117","line":90,"column":6,"nodeType":"115","endLine":90,"endColumn":19,"suggestions":"126"},{"ruleId":"95","severity":1,"message":"123","line":17,"column":8,"nodeType":"97","messageId":"98","endLine":17,"endColumn":25},{"ruleId":"95","severity":1,"message":"127","line":20,"column":8,"nodeType":"97","messageId":"98","endLine":20,"endColumn":17},{"ruleId":"95","severity":1,"message":"128","line":60,"column":10,"nodeType":"97","messageId":"98","endLine":60,"endColumn":18},{"ruleId":"95","severity":1,"message":"129","line":60,"column":20,"nodeType":"97","messageId":"98","endLine":60,"endColumn":31},{"ruleId":"95","severity":1,"message":"130","line":61,"column":10,"nodeType":"97","messageId":"98","endLine":61,"endColumn":18},{"ruleId":"95","severity":1,"message":"131","line":64,"column":10,"nodeType":"97","messageId":"98","endLine":64,"endColumn":23},{"ruleId":"111","severity":1,"message":"112","line":73,"column":13,"nodeType":"113","endLine":78,"endColumn":4},{"ruleId":"111","severity":1,"message":"117","line":90,"column":6,"nodeType":"115","endLine":90,"endColumn":19,"suggestions":"132"},{"ruleId":"95","severity":1,"message":"133","line":92,"column":9,"nodeType":"97","messageId":"98","endLine":92,"endColumn":19},{"ruleId":"95","severity":1,"message":"134","line":120,"column":9,"nodeType":"97","messageId":"98","endLine":120,"endColumn":23},{"ruleId":"119","replacedBy":"135"},{"ruleId":"121","replacedBy":"136"},"no-unused-vars","'env' is defined but never used.","Identifier","unusedVar","'Dashboard' is defined but never used.","'User' is defined but never used.","'Redirect' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'moment' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'i' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'page' and 'rowsPerPage'. Either include them or remove the dependency array.","ArrayExpression",["137"],"React Hook useEffect has a missing dependency: 'userPagination'. Either include it or remove the dependency array.",["138"],"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"'DialogContentText' is defined but never used.","React Hook useEffect has missing dependencies: 'page', 'props.searchName', and 'rowsPerPage'. Either include them or remove the dependency array.",["141"],["142"],"'TextField' is defined but never used.","'editData' is assigned a value but never used.","'setEditData' is assigned a value but never used.","'readOnly' is assigned a value but never used.","'ticketLoading' is assigned a value but never used.",["143"],"'updateUser' is assigned a value but never used.","'changeReadonly' is assigned a value but never used.",["139"],["140"],{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},"no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},{"desc":"146","fix":"150"},{"desc":"146","fix":"151"},"Update the dependencies array to be: [page, rowsPerPage]",{"range":"152","text":"153"},"Update the dependencies array to be: [rowsPerPage, userPagination]",{"range":"154","text":"155"},"Update the dependencies array to be: [page, props.searchName, rowsPerPage]",{"range":"156","text":"157"},{"range":"158","text":"155"},{"range":"159","text":"155"},[2632,2634],"[page, rowsPerPage]",[3020,3033],"[rowsPerPage, userPagination]",[2531,2533],"[page, props.searchName, rowsPerPage]",[2944,2957],[3081,3094]]